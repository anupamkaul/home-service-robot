Problem Statement:
-----------------

Now that you've learned the Occupancy Grid Mapping algorithm, you will get a chance to code it in C++!

In this quiz, a robot equipped with eight sonar rangefinder sensors circulates in an environment to map it. This robot is provided with its exact poses at each timestamp. The code structure is as follows:

Data Files

measurement.txt: The measurements from the sonar rangefinder sensors attached to the robot at each time stamp recorded over a period of 413 seconds. (timestamp, measurement 1:8).
poses.txt: The exact robot poses at each timestamp recorded over a period of 413 seconds. (timestamp, x, y, ϴ).
Global Functions

inverseSensorModel(): You'll code this function as part of your second quiz after learning the inverse sensor model for sonar rangefinder sensors.
occupancyGridMapping(): You'll code this function as part of your first quiz.
Main Function

File Scan: Scanning both the measurement and poses files to retrieve the values. At each time stamp, the values are passed to the occupancy grid mapping function.
Display Map: After processing all the measurements and poses, the map is displayed.

Now, code the occupancyGridMapping() function:

----------

Sensors normally use Cones to detect field of views and hence cells, from the OcGrMap context.
Now ambiguous cases will arise on cells at the border of the cone. At the border of the cells, robot will sense only a PORTION of the cell, and thus, probabilities are weak. Due to this, it is hard to compute the state of the cell at the border. (3 cases arise for cells - Within, At the border, and Outside of the border of the cone beams of the sensor)

To solve this border cell problem, the Inverse Sense Model is used.

3 states can be output for a cell: it is 'free', or part of an 'obstacle', or 'unknown'.

sidenote: The log odds ratio is used to compare two curves. Log = bring the exponential down, and products become additions .....
(Read up Bayesian Statistics book). Products come from marginal / factorization requirements. Log odds also prevents divide by zero etc.

Basically, the Inverse Sensor Model is:

Inverse_Sensor_Model(mi, xt, zt) = log (p(mi | zt, xt) / 1 - p(mi | zt, xt))

thus, giving out a map-part per cell, given the measurements (z) and poses (x), in a log odds representation.

Look at the diagram of Inverse_Sense_Model (attached to the code as a png file):

where: (from the png of inverse_sensor_model):

mi = map at instant i, or current cell that is being processed
xi, yi = center of mass of current cell mi
r: Range of center of mass computed w.r.t. robot pose and center of mass
k: The sonar range-finder cone that best aligns with the cell being considered computed with respect to the robot pose (x,y,θ), center of mass (xi, yi), and sensor angle.
β: opening angle of the conical region formed out of the measurement beams
α: Width of the obstacles (which is almost equal to the size of a cell) (it is NOT the width of the conical region)

(INSIGHT: Obstacles to the sensor in question, ACTUALLY make up the map !! )

----------

At this point, we leave this code and grab the github code ..

Mapping :

So far, you’ve coded the Occupancy Grid Mapping algorithm in C++ and generated an occupancy grid map 2D vector. Now, you'll code a visualization function that will loop through each cell. Then, you'll differentiate between occupied, free, and unknown cells depending on their log odds value. And, finally, you'll plot each cell on a graph to generate the map.

