Discrete Path Planning consists of:

1. Continuous Representation (i.e. configuration space)
2. Discretization of this space
3. Graph Search of this space


Discretization
--------------

To be able to apply a Search Algorithm for path planning (classic), the Configuration space must be reduced to a Finite Size that an algorithm can traverse in a reasonable amount of time,
as it searches for a path from the Start to the Goal.

This reduction in size can be accomplised by Discretization

D, is the process of breaking down a continuous entity (in this case the Configuration Space) into descrete segments.

3 Methods are:

1. Roadmap
2. Cell Decomposition
3. Gradient Field

Once familiar with these 3, we will dive into Graph Search, which can be applied to find a path from Start node to Goal node.

-----

1. Roadmap

Has a construction and query phase. Focus on construction here (query during graph search methods)
Construction phase creates a graph like the metro-train map of a city (hence roadmap)

Two categories:

1. Visibility graph - Connects every visible-from-source thing to everything else. Is complete (finds a soln, if any) and optimal (finds the 'best' soln constrained on a parameter).
Cons are that in 'uncertain' worlds, the optimal solution may actually be close to obstacles, hence will not always work in the real world (of uncertainty)

2. Voronoi graph - Creates maximum clearance between obstacles and path, by bisecting the mean space and creating well-distanced-from-obstacle paths. (See Roadmap.pdf).

-----

2. Cell Decomposition - Look at CellDecompo.pdf for better notes

* Different from Roadmap as it divides the whole area into cells. Edges of the graph connect adjacent cells. 

* Irregular shaped cells are not even Complete, as the solution may lie in a "mixed cell", (neither empty nor full, but both)

* Approximate Cell Decompo is preferred, which divides the area into regular size cells. Even this may not catch the soln, as initial granularity of cells is important.

* To accomodate this, a recursive approach for Approximate Cell Decompo is used. Divide the area into 4 quadrants, catch the Mixed ones, if path not found from Start Node to Finish Node using travelling on empty cells, then recursively break a Mixed cell into 4, and continue ... this algo is Complete but still not Optimal (as an optimal soln may still squeeze in holes left out)

* Approx Cell Decompo is used over Cell Decompo. Usually finds a solution (faster). As the space gets larger, problem starts getting more intractable.

* Data Structs for the algo used: Quad-trees for 2D and Oct-trees for 3D traversal.

-----

3. Gradient Field

Works on a different principle, has a gradient-attract function that stands for the destination/goal (bottoming out part of gradient descent) and a gradient-repulse function that stands for obstacles / potential obstacle (the strutting out parts of gradient descent). Problem may be that this method may neither be complete nor optimal (local minimas may confuse the robot into thinking this minima is the actual destination/goal). Getting stuck in local minima can be unstuck with 'random walks' and other techniques, but ultimately this method is not complete.

----





