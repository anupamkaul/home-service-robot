
1. Motion and Sensing

2. Noise (generate for simulation, and handle)

3. Particle Filters (Distribute particles randomly and uniformly initially) - particles represent the robot itself, where it could be ...

4. Importance Weight - These determine how fat the particle is ... fatter particles will survive a resampling, and as the robot moves, these fat particles will start to converge over time, thereby localizing the robot's ppose (position and orientation w.r.t to a map - and will handle both local and globalization cases)

5. Resampling

6. Error 

---- 

NOTES for Robot_MCL.cpp :
-----------------------

1. The instantiated robot will have a random pose (x, y, Î˜) based on a gaussian distribution. The forward, turn, and sensor noise & params are set to zero.
2. Use the set function to update the pose of the robot. Use the set_noise function to simulate noise. Use the Sense function to measure the robot's distance to the 8 landmarks.
3. Use the Move function to rotate the robot, or to move it forward (only actions allowed). Additional functions to ask the robot to show its pose, or its distance to the 8 landmarks.
4. Simulate noise
5. Generate particles uniformly and randomly (in a 100 * 100 2D area, generate about 1000 particles) - then simulate motion for them (as they represent different points where the robot might be)
6. 



